#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Sep  5 19:15:11 2019

@author: danyeo
"""
from scipy import integrate 
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

#variable inputs

l1,l2,m1,m2=[5,1,1,8]
a=[1,2,3,4]
c=a[0:2]
g=9.81
M=m1+m2
#defining functions 
def F(x,y,z):
    a=(-m2*l2*np.sin(x-y)*z**2)-(M*g*np.sin(x))
    return a

def G(x,y,z):
    a=(l1*np.sin(x-y)*z**2)-(g*np.sin(y))
    return a 
 #visiblity of the trajecory tracker 0<x<1
def func(x,t):
    u=x[0]    #theta1
    r=x[1]    #theta2
    w=x[2]    #theta1 dot
    y=x[3]    #theta2 dot    
    dudt=w
    drdt=y
    dwdt=(F(u,r,y)-(m2*np.cos(u-r)*G(u,r,w)))/(M*l1-m2*l1*(np.cos(u-r)**2))
    dydt=(M*G(u,r,w)-(np.cos(u-r)*F(u,r,y)))/(M*l2-m2*l2*(np.cos(u-r)**2))
    return [dudt,drdt,dwdt,dydt]
x0=[3,3,0,0]  #initial conditions, theta1, theta2, theta1 dot, theta2 dot
t1=15      #Time duration of animation

#defining scaling functions for mass points on the animations 
if m1==0:
    a=0
    b=12
elif m2==0:
    a=12
    b=0
elif m1<m2:
    a=8
    b=a*(m2/m1)**0.5
else:
    b=8
    a=b*(m1/m2)**0.5    



#Cartesian data points

t=np.linspace(0,t1,t1*120)
x=integrate.odeint(func,x0,t)
theta1=x[:,0]
theta2=x[:,1]
t1dot=x[:,2]
t2dot=x[:,3]
y0=l1*np.sin(theta1)
y1=-l1*np.cos(theta1)
y2=l1*np.sin(theta1)+l2*np.sin(theta2)
y3=-l1*np.cos(theta1)-l2*np.cos(theta2)
#kinetic energy and potential energy 
Ek=0.5*M*l1**2*t1dot**2+0.5*m2*l2**2*t2dot**2+m2*l1*l2*np.cos(theta1-theta2)*t1dot*t2dot
PE=+m1*g*y1+m2*g*y3
TE=Ek+PE

plt.plot(t,Ek,label='Kinetic Energy')
plt.plot(t,PE,label='Potential Energy')
plt.plot(t,TE,label='Total Energy')
plt.xlabel('t/s')
plt.ylabel('E/J')
plt.legend()

s=str('Energy variation: t=0, '+r'$\theta_1$'+':%.1f, '+r'$\theta_2$'+':%.1f') %(x0[0],x0[1])
plt.title(s)
plt.show()
#determining standard deviation of the energy 

fig=plt.figure()
l=l1+l2+0.5
ax = plt.axis([-l,l,-l,l])


mass1, = plt.plot(10, 10,'ro',markersize=a,zorder=3)
mass2, = plt.plot(10,10,'bo',markersize=b, zorder=3)


#defining the rigid rods of the masses
q=np.linspace(0,1,1000) 
line1,=plt.plot(0,0,'black')
line2,=plt.plot(0,0,'black')
line3,=plt.plot(y2[0],y3[0],alpha=0)
'''
Defining plot for trajectory tracker
'''


def element(y,i,j):
    if (i<j):
        a=y[0:i]
    else:
        a=y[i-j:i]
    return a
j=300  #point on the tracker lasts for 'j' frames


def animate(i):
    
    mass1.set_data(y0[i], y1[i])
    mass2.set_data(y2[i],y3[i])
    line1.set_data(q*l1*np.sin(theta1[i]),-q*l1*np.cos(theta1[i]))
    line2.set_data(y0[i]+l2*q*np.sin(theta2[i]),y1[i]-l2*q*np.cos(theta2[i]))
    line3.set_data(element(y2,i,j),element(y3,i,j))
    return mass1,mass2,line1,line2,line3,
plt.axis('off')
# create animation using the animate() function
myAnimation = animation.FuncAnimation(fig, animate, frames=np.arange(0,120*t1, 1), 
                                      interval=8, blit=False, repeat=True)
s=('Variables'+'\n'+r'$m_1:%.2f kg$'+'\n'+r'$ m_2:%.2f kg$'+'\n'+r'$l_1:%.2f m$'+'\n'+r'$ l_2:%.2f m$' ) %(m1,m2,l1,l2) 
plt.text(-l-0.5,l-0.5,s)
plt.show()
#myAnimation.save('pend1.mp4')
