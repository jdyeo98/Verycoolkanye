#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jun 30 20:25:27 2019

@author: danyeo
"""

#summing a series of sine functions 
import numpy as np
import scipy.integrate as integ
from math import *
import matplotlib.pyplot as plt
from matplotlib import *
from mpl_toolkits import mplot3d
import matplotlib.animation as animation 

L=10**-9
m=10**(-27)
hbar=1.054571800*10**(-34)
tim1=3*10**-12
om=12*10**-11
n=50 #dont go over 100! Unless your computer can handle it :)
#print(n)
def gauss(x):
    return np.exp((-(x-L/2)**2)/(2*om**2))
def gauss1(x):
    return gauss(x)**2
b= integ.quad(gauss1,0,L)
#print(b)
#normalising the gaussian function 
def gauss2(x):
    return 1/(np.sqrt(b[0]))*gauss(x)
#energy eigenstates
def eigen(x,m):
    return np.sqrt(2/L)*np.sin(m*np.pi*x/L)
def coeff(x,m):
    return eigen(x,m)*gauss2(x)
an= lambda m: integ.quad(coeff,0,L,args=(m))
cn=list()
for i in range(n):
    cn.append(an(i+1)[0])
#print(cn)
def y(x):
    y1=0
    for i in range(lens(n)):
        y1=y1+cn[i]*eigen(x,i+1)
    return y1
x=np.linspace(0,L,50)
plt.plot(x,gauss2(x)**2)
plt.xlabel('x/m')
plt.ylabel(r'$|\phi|^2$')
plt.title('Probabilty density as a function of time')

'''
plt.plot(x,y(x)**2)

plt.show()
'''
#defining omega function
def omega(v):
    return (v**2*(np.pi)**2*hbar)/(2*m*L**2)
#time dependant statevector
def h(x,t):
    y2=0
    for i in range(n):
        y2=y2 + cn[i]*eigen(x,i+1)*np.exp(1j*omega(i+1)*t)
    return y2
def hh(x,t):
    y2=0
    for i in range(n):
        y2=y2 + cn[i]*eigen(x,i+1)*np.exp(-1j*omega(i+1)*t)
    return y2
#complex conjugate 
def p(x,t):
    return np.real(h(x,t)*hh(x,t))

t=np.linspace(0,tim1,100)
plt.plot(x,p(x,0))
plt.plot(x,p(x,0.2*10**-12))
plt.plot(x,p(x,0.40*10**-12))
plt.show()
fig=plt.figure(figsize = (15,15))
ax = plt.axes(projection='3d')
X, T = np.meshgrid(x,t)
ax.set_xlabel('x/m')
ax.set_ylabel('t/s')
ax.set_zlabel(r'$|\phi|^2$')
Z= p(X,T)
ax.plot_surface(X,T,Z, cmap=cm.coolwarm, linewidth=0, antialiased=False)
fig3=plt.gcf()

ax.view_init(45,45)
fig3.savefig('Qua.pdf')
plt.show()
#two dimensional plot


a=0.2*10**-12
fig=plt.figure(figsize = (15,15))
ax = plt.axes(projection='3d')
def space(x,y):
    return p(x,a)*p(y,a)
y=np.linspace(0,L,50)
X, Y = np.meshgrid(x,y)
ax.set_xlabel('x/m')
ax.set_ylabel('y/m')
ax.set_zlim(0,10**19)
ax.set_zlabel(r'$|\phi|^2$')
Z= space(X,Y)
ax.plot_surface(X,Y,Z, cmap=cm.coolwarm, linewidth=0, antialiased=False)
fig3=plt.gcf()

ax.view_init(45,45)
fig3.savefig('Qua1.pdf')
plt.show()

t1=0
for i in range(0,200,1):

# Make the plot
    j=i*7.5*10**-15
    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ax = plt.axes(projection='3d')
    def space(x,y):
         return p(x,j)*p(y,j)
    y=np.linspace(0,L,50)

    X, Y = np.meshgrid(x,y)
    ax.set_xlabel('x/m')
    ax.set_ylabel('y/m')
    ax.set_zlim(0,1.8*10**19)
    ax.set_zlabel(r'$|\phi|^2$')
    Z= space(X,Y)
    l1 = ('Time elapsed: \n %.3G s' %t1) 
    ax.text(0,0,1.5*10**19,l1)
    t1=i*7.5*10**-15
    ax.plot_surface(X,Y,Z, cmap=cm.coolwarm, linewidth=0, antialiased=False)
    fig3=plt.gcf()
    filename='Quantum1/Qunatum_step'+str(i)+'.png'
    plt.savefig(filename, dpi=96)
    plt.gca()
#combine into a gif   
